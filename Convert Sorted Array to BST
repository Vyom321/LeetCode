1.Choose the middle element as the root
2.Recursive dision
3.If the current segment is empty, return null, as there are no more elements to process.

class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return helper(nums , 0 , nums.size()-1);
    }
private:
    TreeNode* helper(vector<int>& nums , int left , int right){
        if(left>right)
        return nullptr;
        int mid = left+(right-left)/2;
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = helper(nums , left ,mid-1);
        root->right = helper(nums , mid+1 , right);
        return root;
    }
};
